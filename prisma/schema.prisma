// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(EDITOR)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products Product[]
  analytics ProductAnalytics[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id           String   @id @default(cuid())
  name         String
  slug         String   @unique
  description  String?
  price        Float
  image        String
  externalLink String
  features     String[] // Array of features
  isActive     Boolean  @default(true)
  clicks       Int      @default(0)
  categoryId   String?
  createdById  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  category    Category?           @relation(fields: [categoryId], references: [id])
  createdBy   User                @relation(fields: [createdById], references: [id])
  analytics   ProductAnalytics[]

  @@map("products")
}

model ProductAnalytics {
  id        String   @id @default(cuid())
  productId String
  userId    String?
  ipAddress String?
  userAgent String?
  referrer  String?
  clickedAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id])

  @@map("product_analytics")
}

model ContactMessage {
  id      String   @id @default(cuid())
  name    String
  email   String
  phone   String?
  subject String
  message String
  isRead  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("contact_messages")
}

model SiteSettings {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("string") // string, number, boolean, json

  @@map("site_settings")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  EDITOR
  VIEWER
}
